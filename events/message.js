const mongoose = require('mongoose');
const Guild = require('../models/guild');
const userServer = require('../models/userServer');
const userGlobal = require('../models/userGlobal');
const Command = require('../models/command');
const Discord = require('discord.js');
const TikTokScraper = require('tiktok-scraper');
const fetch = require('node-fetch');
require('dotenv').config();
const moment = require('moment');
const InstagramScraper = require('instatouch');
const trim = (str, max) => (str.length > max ? `${str.slice(0, max - 3)}...` : str);

var markdownEscape = function(text) {
   if (text.includes('_', '*', '~')) {
     return `\`\`\`${text}\`\`\``
   } else {
     return text
   }
};

const cooldown = new Set();

module.exports = async (client, message) => {
    if (message.author.bot) return;

    const settings = await Guild.findOne({
        guildID: message.guild.id
    }, (err, guild) => {
        if (err) console.error(err)
        if (!guild) {
            const newGuild = new Guild({
              _id: mongoose.Types.ObjectId(),
              guildID: message.guild.id,
              guildName: message.guild.name,
              prefix: process.env.PREFIX,
              NSFW: 'disable',
              welcomeEnable: 'disable',
              welcomeMsg: '',
              tiktok: 'enable',
              instagram: 'enable',
              logChannelID: null,
              MsgLogChannelID: '',
              welcomeChannel: '',
              muteRole: '',
            })

            newGuild.save()
            .then(result => console.log(result))
            .catch(err => console.error(err));

            return message.channel.send('This server was not in our database! We have now added and you should be able to use bot commands.').then(m => m.delete({timeout: 10000}));
        }
    });
    await userServer.findOne({
      guildID: message.guild.id, userID: message.author.id
  }, (err, author) => {
      if (err) console.error(err)
      if (!author) {
          const newUserServer = new userServer({
              _id: mongoose.Types.ObjectId(),
              guildID: message.guild.id,
              guildName: message.guild.name,
              userID: message.author.id,
              username: message.author.tag,
              xp: 0,
              level: 1,
              muteCount: 0,
              warnCount: 0,
              kickCount: 0,
              banCount: 0
          })

          newUserServer.save()
          .then()
          .catch(err => console.error(err));
      }
  });
  await userGlobal.findOne({
      userID: message.author.id
  }, (err, author) => {
      if (err) console.error(err)
      if (!author) {
          const newUserGlobal = new userGlobal({
              _id: mongoose.Types.ObjectId(),
              userID: message.author.id,
              username: message.author.tag,
              xp: 0,
              level: 1,
              weather: '',
              horoscope: '',
              lastfm: ''
          })

          newUserGlobal.save()
          .then()
          .catch(err => console.error(err));
          return console.log(`${message.author.username} has joined our database`);
      }
  });

    const addXPserver = async (guildID, userID, xpToAdd) => {
      if (cooldown.has(userID)) {
      }
        const getNeededXP = (level) => level * level * 100
        const result = await userServer.findOneAndUpdate(
            {
                guildID,
                userID,
            },
            {
                guildID,
                userID,
              $inc: {
                xp: xpToAdd,
              },
            },
            {
            }
          )
          let { xp, level } = result
        const needed = getNeededXP(level)

        if (xp >= needed) {
         ++level
            xp -= needed
            await userServer.updateOne(
                {
                  guildID,
                  userID,
                },
                {
                  level,
                  xp,
                }
              )
            }
            cooldown.add(userID);
            setTimeout(() => {
              cooldown.delete(userID)
            }, 60000) // 1 minute
        }
        addXPserver(message.guild.id, message.member.id, 23).catch();
    
        const addXPglobal = async (userID, xpToAdd) => {
          if (cooldown.has(userID)) {
          }
            const getNeededXP = (level) => level * level * 100
            const result = await userGlobal.findOneAndUpdate(
                {
                    userID
                },
                {
                    userID,
                  $inc: {
                    xp: xpToAdd,
                  },
                },
                {
                }
              )
              let { xp, level } = result
            const needed = getNeededXP(level)
    
            if (xp >= needed) {
             ++level
                xp -= needed
                await userGlobal.updateOne(
                    {
                      userID,
                    },
                    {
                      level,
                      xp,
                    }
                  )
                }
                cooldown.add(userID);
            setTimeout(() => {
              cooldown.delete(userID)
            }, 60000) // 1 minute
            }
            addXPglobal(message.member.id, 23).catch();
            if (message.content.includes('tiktok.com')) {
              if (settings.tiktok == 'disable') {
                return
              }
              // need to check if it is a link before executing
              let checkUrl = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/
              if (checkUrl.test(message) == false) {
                return
              }
              let testString = message.content
              //console.log(message.content)
              const query = testString.match(/\bhttps?:\/\/\S+/gi);
              //const finalQuery = query[0]
              //console.log(finalQuery)
              const videoMeta = await TikTokScraper.getVideoMeta(query, {
                proxy: ['45.118.132.67:4179',
                '209.40.237.43:8080',
                '124.122.9.34:8080',
                '186.183.220.2:8080',
                '177.21.25.17:9999',
                '91.193.253.188:23500',
                '200.116.164.252:8080',
                '1.20.101.24:51681',
                '191.242.178.209:3128',
                '138.197.217.138:3128',
                '177.52.221.193:999',
                '190.171.180.162:50846',
                '190.121.146.66:999',
                '91.187.75.132:8080',
                '84.42.4.170:8080',
                '157.230.14.39:3128',
                '45.167.30.82:8080',
                '45.201.214.43:3127',
                '69.12.73.214:3128',
                '45.141.1.191:8080',
                '35.206.150.95:3128',
                '103.125.216.166:3128',
                '183.181.60.190:3128',
                '107.150.22.210:8080',
                '85.31.246.47:3128',
                '212.115.233.51:3128',
                '180.149.232.149:8080',
                '143.110.151.242:3128',
                '41.139.146.95:8080',
                '3.22.0.212:8080',
                '119.42.109.117:8080',
                '52.170.194.173:3128',
                '161.199.130.1:8080',
                '18.138.238.163:8080',
                '183.88.226.50:8080',
                '3.234.253.70:80',
                '110.78.141.31:8080',
                '95.168.96.42:34273',
                '197.246.202.186:8080',
                '194.250.57.253:8080',
                '176.113.73.103:3128',
                '138.122.7.33:32192',
                '131.221.64.152:23500',
                '178.128.83.219:8899',
                '198.24.171.34:17631',
                '183.88.97.188:8213',
                '168.119.60.44:3128',
                '136.232.187.118:3128',
                '37.238.171.182:8080',
                '20.151.27.156:3128',
                '183.82.99.126:3128',
                '54.156.145.160:8080',
                '185.255.44.22:8080',
                '41.220.136.114:8080',
                '134.122.127.141:3128',
                '195.138.90.226:3128',
                '54.211.249.161:3128',
                '180.92.238.248:8080',
                '104.238.133.16:8080',
                '147.91.111.133:37979',
                '159.192.138.170:8080',
                '18.220.245.188:3128',
                '186.10.118.189:8081',
                '81.255.13.197:8080',
                '201.20.105.250:8080',
                '95.111.134.122:32345',
                '117.197.40.252:8080',
                '129.21.146.20:8080',
                '113.53.29.218:33885',
                '195.178.56.32:8080',
                '68.134.213.11:3128',
                '83.209.186.156:8080',
                '1.20.169.66:8080',
                '78.110.154.177:59888',
                '41.33.66.229:34560',
                '184.155.36.194:8080',
                '45.235.40.2:8080',
                '168.196.114.8:50001',
                '88.200.155.203:3128',
                '194.44.52.225:8080',
                '18.139.173.12:3128',
                '183.89.76.184:8080',
                '18.188.17.80:2333',
                '91.218.244.153:8080',
                '78.154.167.68:8080',
                '98.154.21.253:3128',
                '185.34.17.248:58137',
                '87.250.109.174:8080',
                '176.236.143.253:8080',
                '104.248.155.139:8118',
                '207.148.124.114:8080',
                '18.224.59.63:3128',
                '84.53.247.204:53281',
                '188.166.162.1:3128',
                '223.206.93.43:8080',
                '20.47.98.2:3128',
                '1.20.150.95:8080',
                '161.97.127.136:3128',
                '138.0.89.110:9991',
                '183.88.196.83:8080',
                '157.230.86.93:3128',
                '179.52.204.138:999',
                '90.157.198.182:8080',
                '35.231.210.95:3128',
                '96.9.87.111:8080',
                '208.180.185.170:8080',
                '91.227.246.163:8080',
                '206.189.145.178:8080',
                '191.102.125.245:8080',
                '74.208.131.71:3128',
                '95.111.240.44:3128',
                '125.27.251.249:50890',
                '70.169.141.35:3128',
                '152.179.12.86:3128',
                '23.236.146.34:4444',
                '116.203.67.172:3128',
                '138.68.227.220:3128',
                '115.87.98.69:3128',
                '70.165.65.233:48678',
                '3.140.22.207:3128',
                '1.179.148.9:55636',
                '212.129.4.21:3128',
                '168.119.103.160:10303',
                '45.251.231.78:8080',
                '3.143.9.185:3128',
                '102.141.197.17:8080',
                '177.73.49.12:8080',
                '149.28.138.89:8080',
                '107.178.6.30:8080',
                '118.174.196.112:36314',
                '212.19.20.215:3128',
                '52.28.216.167:3128',
                '184.82.160.99:8080',
                '45.5.117.98:999',
                '185.242.113.156:3128',
                '138.185.190.45:8080',
                '142.147.125.30:8080',
                '101.51.103.2:8080',
                '173.166.149.188:8080',
                '154.0.154.80:8080',
                '47.90.132.228:3128',
                '23.21.179.114:8080',
                '41.59.209.111:8080',
                '47.254.90.125:8888',
                '58.11.59.139:8080',
                '103.152.101.139:8080',
                '1.179.183.73:50178',
                '103.250.69.233:8080',
                '103.109.58.102:46523',
                '117.121.211.170:8080',
                '144.91.85.172:3128',
                '41.207.251.198:8080',
                '1.20.97.181:55285',
                '158.51.109.34:31289',
                '182.53.206.198:8080',
                '117.204.255.12:39775',
                '66.42.52.220:8080',
                '190.211.81.212:3128',
                '206.189.146.202:8080',
                '200.123.2.171:3128',
                '67.73.187.42:999',
                '178.128.24.186:3128',
                '213.6.65.30:8080',
                '103.78.55.113:8080',
                '183.89.150.197:8080',
                '95.154.111.58:3128',
                '24.106.221.230:53281',
                '3.112.24.202:8080',
                '124.121.116.238:8080',
                '159.89.29.28:3128',
                '118.175.207.180:40017',
                '93.120.196.54:53281',
                '107.178.1.1:8080',
                '176.67.54.231:8080',
                '139.180.187.150:8080',
                '190.90.252.201:999',
                '14.207.41.166:8213',
                '204.199.146.161:999',
                '178.212.54.137:8080',
                '83.238.13.109:8080',
                '117.197.119.71:8080',
                '118.172.201.105:60762',
                '181.129.183.19:53281',
                '45.80.181.14:3128',
                '1.10.189.133:40569',
                '95.111.239.113:3128',
                '178.140.58.34:8080',
                '31.131.67.14:8080',
                '103.89.156.1:8080',
                '180.180.12.4:8080',
                '200.61.16.80:8080',
                '43.231.79.53:8080',
                '89.216.48.230:44061',
                '3.139.137.4:3128',
                '54.167.249.213:3128',
                '24.172.82.94:53281',
                '139.180.191.24:8080',
                '5.58.52.231:8080',
                '115.87.205.117:8080',
                '87.120.240.109:8080',
                '181.129.189.114:8080',
                '14.207.122.103:8080',
                '186.224.27.227:3128',
                '165.232.173.236:3128',
                '154.127.38.1:60020',
                '200.69.70.195:8080',
                '209.33.9.244:8080',
                '41.75.212.154:8080',
                '190.103.85.36:8080',
                '183.89.159.143:8080',
                '139.59.14.147:3128',
                '78.110.7.192:3128',
                '45.250.226.53:8080',
                '91.217.202.174:8080',
                '34.64.114.171:80',
                '184.82.227.118:5649',
                '207.148.119.162:8080',
                '118.173.233.149:45160',
                '195.85.218.66:8080',
                '93.126.44.154:8080',
                '143.198.222.22:8080',
                '69.75.140.157:8080',
                '183.89.115.107:8080',
                '110.44.124.220:55443',
                '103.216.48.85:8080',
                '213.216.67.190:8080',
                '136.244.92.97:8080',
                '199.192.126.211:8080',
                '102.176.160.70:61279',
                '118.172.181.147:34388',
                '49.0.65.4:8080',
                '41.60.234.130:8080',
                '212.46.255.78:8080',
                '14.207.124.10:8080',
                '159.65.134.33:8080',
                '176.56.107.141:57628',
                '77.45.201.219:8080',
                '217.19.209.253:8080',
                '191.242.182.132:8081',
                '103.124.97.11:8080',
                '143.198.3.76:3128',
                '52.221.214.155:8080',
                '35.220.171.251:3130',
                '18.163.55.6:80',
                '41.75.4.208:53281',
                '157.230.40.79:8080',
                '193.233.9.167:57625',
                '161.82.175.172:8080',
                '45.177.233.145:8080',
                '159.192.149.80:8080',
                '149.125.50.231:8080',
                '157.230.85.89:8080',
                '125.25.206.28:8080',
                '143.55.57.18:8080',
                '54.183.155.78:3128',
                '14.207.14.222:8213',
                '80.87.213.111:8080',
                '62.152.75.110:50287',
                '45.164.216.253:8080',
                '154.73.53.186:8080',
                '186.96.177.60:3128',
                '95.165.4.178:8080',
                '185.136.162.4:8080',
                '18.139.161.101:80',
                '35.220.171.251:3128',
                '103.213.213.14:82',
                '113.53.83.212:44664',
                '61.19.40.50:31707',
                '177.47.191.194:8080',
                '46.209.106.66:8085',
                '180.180.170.188:8080',
                '43.231.63.115:8080',
                '20.48.18.90:8080',
                '82.200.215.136:3128',
                '103.5.232.145:8080',
                '82.99.232.18:58689',
                '93.125.121.54:8080',
                '136.232.209.70:47423',
                '185.43.189.148:8080',
                '83.242.251.37:8080',
                '31.172.105.144:8080',
                '23.140.80.226:999',
                '179.53.194.172:999',
                '142.93.53.237:3128',
                '93.180.221.234:8080',
                '121.211.254.46:8080',
                '124.121.117.123:8213',
                '85.163.230.171:8080',
                '45.77.43.249:8080',
                '80.28.102.26:8080',
                '88.135.210.179:8080',
                '174.138.116.12:80',
                '41.220.114.154:8080',
                '183.88.57.128:8080',
                '192.248.145.25:8080',
                '93.91.112.247:41258',
                '18.218.138.95:3128',
                '202.29.237.212:3128',
                '195.53.49.11:3128',
                '81.163.57.147:41258',
                '195.239.217.102:8080',
                '144.202.121.95:3128',
                '67.219.125.54:8080',
                '103.47.175.9:83',
                '50.241.148.97:8080',
                '176.113.73.97:3128',
                '14.207.82.19:8080',
                '187.2.32.121:8080',
                '177.75.96.18:3128',
                '207.174.202.218:8080',
                '54.92.185.187:3128',
                '104.154.55.201:80',
                '196.22.221.97:58893',
                '191.253.23.75:8080',
                '192.241.172.93:8080',
                '95.179.249.63:3128',
                '167.179.78.102:8080',
                '182.53.197.156:43060',
                '216.128.129.168:3128',
                '45.233.169.28:999',
                '190.95.214.185:8080',
                '186.225.63.134:38459',
                '118.174.232.128:45019',
                '102.141.210.93:53281',
                '194.228.129.189:55472',
                '176.236.98.37:8080',
                '185.35.101.17:8081',
                '177.71.77.202:20183',
                '78.90.203.56:8080',
                '207.148.69.3:8080',
                '110.171.20.177:8080',
                '101.109.17.206:8080',
                '95.139.141.199:53281',
                '202.128.22.29:48678',
                '186.157.242.229:8080',
                '95.79.36.55:44861',
                '71.172.1.53:8080',
                '198.12.254.161:3128',
                '182.52.131.8:8080',
                '109.234.38.27:3128',
                '191.7.193.13:8080',
                '84.244.31.19:8080',
                '178.128.109.226:8080',
                '90.163.133.120:8080',
                '103.52.220.106:83',
                '35.225.65.205:3128',
                '171.99.131.78:8080',
                '186.0.176.147:8080',
                '62.138.8.187:3128',
                '199.58.97.17:8080',
                '101.109.176.109:8080',
                '27.72.56.139:8080',
                '24.245.100.212:48678',
                '223.206.211.139:8080',
                '183.88.212.184:8080',
                '45.32.104.123:8888',
                '155.138.156.26:8888',
                '89.20.102.147:2580',
                '202.166.207.195:8080',
                '143.198.206.183:8080',
                '185.17.134.149:45984',
                '197.155.83.17:8080',
                '177.128.216.6:3128',
                '41.217.219.53:31398',
                '157.245.252.104:8080',
                '64.225.60.115:3128',
                '185.200.38.74:8080',
                '49.231.159.165:8080',
                '35.245.254.223:3128',
                '159.89.28.169:3128',
                '152.228.152.75:8080',
                '204.199.85.179:3128',
                '1.20.99.122:8080',
                '187.53.4.222:8080',
                '13.250.32.7:3128',
                '190.210.8.91:8080',
                '187.190.53.182:8080',
                '142.93.108.171:3128',
                '118.174.234.21:43195',
                '176.28.23.150:3128',
                '176.62.188.158:56351',
                '18.141.191.162:80',
                '27.72.59.160:8080',
                '111.92.240.134:30598',
                '198.24.169.234:8001',
                '1.20.235.100:8080',
                '5.58.58.209:8080',
                '88.220.104.178:8080',
                '18.224.199.84:49205',
                '183.88.71.105:8213',
                '189.201.134.13:8080',
                '131.161.237.86:8090',
                '14.102.44.1:44047',
                '180.180.156.15:43100',
                '14.207.22.204:8080',
                '94.25.104.250:8080',
                '63.151.67.7:8080',
                '202.61.51.204:3128',
                '134.122.40.11:3128',
                '186.167.20.211:3128']
              })
              const video = videoMeta.collector[0];
              //console.log(video)
              const videoURL = video.videoUrl
              const headers = videoMeta.headers;
              const response = await fetch(videoURL, {
                method: 'GET', headers
              });
              const buffer = await response.buffer()
              //console.log(response)
              //console.log(buffer)
              try {
              const embed = new Discord.MessageEmbed()
              .setTitle(`${markdownEscape(video.text)}`)
              .setFooter(moment.unix(video.createTime).format("dddd, MMMM Do YYYY, h:mm A"))
              .setColor('#000000')
              .setAuthor(video.authorMeta.name, video.authorMeta.avatar, `https://www.tiktok.com/@${video.authorMeta.name}?`)
              await message.channel.send(new Discord.MessageAttachment(buffer, 'video.mp4'))
              await message.channel.send(embed)
              } catch {
                return
              }
            }
            if (message.content.includes('instagram.com')) {
              if (settings.instagram == 'disable') {
                return
              }
              let checkUrl = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/
              if (checkUrl.test(message) == false) {
                return
              }
              let testString = message.content
              const query = testString.match(/\bhttps?:\/\/\S+/gi);
              const finalQuery = query[0]
              //console.log(finalQuery)
              const sliceQuery = finalQuery.substr(0, finalQuery.lastIndexOf("/") + 1);
              console.log(sliceQuery)
              const data = await InstagramScraper.getPostMeta(sliceQuery, 
                {
                  session:`sessionid=${process.env.IGsessionID}`,
                  proxy: ['45.118.132.67:4179',
                  '209.40.237.43:8080',
                  '124.122.9.34:8080',
                  '186.183.220.2:8080',
                  '177.21.25.17:9999',
                  '91.193.253.188:23500',
                  '200.116.164.252:8080',
                  '1.20.101.24:51681',
                  '191.242.178.209:3128',
                  '138.197.217.138:3128',
                  '177.52.221.193:999',
                  '190.171.180.162:50846',
                  '190.121.146.66:999',
                  '91.187.75.132:8080',
                  '84.42.4.170:8080',
                  '157.230.14.39:3128',
                  '45.167.30.82:8080',
                  '45.201.214.43:3127',
                  '69.12.73.214:3128',
                  '45.141.1.191:8080',
                  '35.206.150.95:3128',
                  '103.125.216.166:3128',
                  '183.181.60.190:3128',
                  '107.150.22.210:8080',
                  '85.31.246.47:3128',
                  '212.115.233.51:3128',
                  '180.149.232.149:8080',
                  '143.110.151.242:3128',
                  '41.139.146.95:8080',
                  '3.22.0.212:8080',
                  '119.42.109.117:8080',
                  '52.170.194.173:3128',
                  '161.199.130.1:8080',
                  '18.138.238.163:8080',
                  '183.88.226.50:8080',
                  '3.234.253.70:80',
                  '110.78.141.31:8080',
                  '95.168.96.42:34273',
                  '197.246.202.186:8080',
                  '194.250.57.253:8080',
                  '176.113.73.103:3128',
                  '138.122.7.33:32192',
                  '131.221.64.152:23500',
                  '178.128.83.219:8899',
                  '198.24.171.34:17631',
                  '183.88.97.188:8213',
                  '168.119.60.44:3128',
                  '136.232.187.118:3128',
                  '37.238.171.182:8080',
                  '20.151.27.156:3128',
                  '183.82.99.126:3128',
                  '54.156.145.160:8080',
                  '185.255.44.22:8080',
                  '41.220.136.114:8080',
                  '134.122.127.141:3128',
                  '195.138.90.226:3128',
                  '54.211.249.161:3128',
                  '180.92.238.248:8080',
                  '104.238.133.16:8080',
                  '147.91.111.133:37979',
                  '159.192.138.170:8080',
                  '18.220.245.188:3128',
                  '186.10.118.189:8081',
                  '81.255.13.197:8080',
                  '201.20.105.250:8080',
                  '95.111.134.122:32345',
                  '117.197.40.252:8080',
                  '129.21.146.20:8080',
                  '113.53.29.218:33885',
                  '195.178.56.32:8080',
                  '68.134.213.11:3128',
                  '83.209.186.156:8080',
                  '1.20.169.66:8080',
                  '78.110.154.177:59888',
                  '41.33.66.229:34560',
                  '184.155.36.194:8080',
                  '45.235.40.2:8080',
                  '168.196.114.8:50001',
                  '88.200.155.203:3128',
                  '194.44.52.225:8080',
                  '18.139.173.12:3128',
                  '183.89.76.184:8080',
                  '18.188.17.80:2333',
                  '91.218.244.153:8080',
                  '78.154.167.68:8080',
                  '98.154.21.253:3128',
                  '185.34.17.248:58137',
                  '87.250.109.174:8080',
                  '176.236.143.253:8080',
                  '104.248.155.139:8118',
                  '207.148.124.114:8080',
                  '18.224.59.63:3128',
                  '84.53.247.204:53281',
                  '188.166.162.1:3128',
                  '223.206.93.43:8080',
                  '20.47.98.2:3128',
                  '1.20.150.95:8080',
                  '161.97.127.136:3128',
                  '138.0.89.110:9991',
                  '183.88.196.83:8080',
                  '157.230.86.93:3128',
                  '179.52.204.138:999',
                  '90.157.198.182:8080',
                  '35.231.210.95:3128',
                  '96.9.87.111:8080',
                  '208.180.185.170:8080',
                  '91.227.246.163:8080',
                  '206.189.145.178:8080',
                  '191.102.125.245:8080',
                  '74.208.131.71:3128',
                  '95.111.240.44:3128',
                  '125.27.251.249:50890',
                  '70.169.141.35:3128',
                  '152.179.12.86:3128',
                  '23.236.146.34:4444',
                  '116.203.67.172:3128',
                  '138.68.227.220:3128',
                  '115.87.98.69:3128',
                  '70.165.65.233:48678',
                  '3.140.22.207:3128',
                  '1.179.148.9:55636',
                  '212.129.4.21:3128',
                  '168.119.103.160:10303',
                  '45.251.231.78:8080',
                  '3.143.9.185:3128',
                  '102.141.197.17:8080',
                  '177.73.49.12:8080',
                  '149.28.138.89:8080',
                  '107.178.6.30:8080',
                  '118.174.196.112:36314',
                  '212.19.20.215:3128',
                  '52.28.216.167:3128',
                  '184.82.160.99:8080',
                  '45.5.117.98:999',
                  '185.242.113.156:3128',
                  '138.185.190.45:8080',
                  '142.147.125.30:8080',
                  '101.51.103.2:8080',
                  '173.166.149.188:8080',
                  '154.0.154.80:8080',
                  '47.90.132.228:3128',
                  '23.21.179.114:8080',
                  '41.59.209.111:8080',
                  '47.254.90.125:8888',
                  '58.11.59.139:8080',
                  '103.152.101.139:8080',
                  '1.179.183.73:50178',
                  '103.250.69.233:8080',
                  '103.109.58.102:46523',
                  '117.121.211.170:8080',
                  '144.91.85.172:3128',
                  '41.207.251.198:8080',
                  '1.20.97.181:55285',
                  '158.51.109.34:31289',
                  '182.53.206.198:8080',
                  '117.204.255.12:39775',
                  '66.42.52.220:8080',
                  '190.211.81.212:3128',
                  '206.189.146.202:8080',
                  '200.123.2.171:3128',
                  '67.73.187.42:999',
                  '178.128.24.186:3128',
                  '213.6.65.30:8080',
                  '103.78.55.113:8080',
                  '183.89.150.197:8080',
                  '95.154.111.58:3128',
                  '24.106.221.230:53281',
                  '3.112.24.202:8080',
                  '124.121.116.238:8080',
                  '159.89.29.28:3128',
                  '118.175.207.180:40017',
                  '93.120.196.54:53281',
                  '107.178.1.1:8080',
                  '176.67.54.231:8080',
                  '139.180.187.150:8080',
                  '190.90.252.201:999',
                  '14.207.41.166:8213',
                  '204.199.146.161:999',
                  '178.212.54.137:8080',
                  '83.238.13.109:8080',
                  '117.197.119.71:8080',
                  '118.172.201.105:60762',
                  '181.129.183.19:53281',
                  '45.80.181.14:3128',
                  '1.10.189.133:40569',
                  '95.111.239.113:3128',
                  '178.140.58.34:8080',
                  '31.131.67.14:8080',
                  '103.89.156.1:8080',
                  '180.180.12.4:8080',
                  '200.61.16.80:8080',
                  '43.231.79.53:8080',
                  '89.216.48.230:44061',
                  '3.139.137.4:3128',
                  '54.167.249.213:3128',
                  '24.172.82.94:53281',
                  '139.180.191.24:8080',
                  '5.58.52.231:8080',
                  '115.87.205.117:8080',
                  '87.120.240.109:8080',
                  '181.129.189.114:8080',
                  '14.207.122.103:8080',
                  '186.224.27.227:3128',
                  '165.232.173.236:3128',
                  '154.127.38.1:60020',
                  '200.69.70.195:8080',
                  '209.33.9.244:8080',
                  '41.75.212.154:8080',
                  '190.103.85.36:8080',
                  '183.89.159.143:8080',
                  '139.59.14.147:3128',
                  '78.110.7.192:3128',
                  '45.250.226.53:8080',
                  '91.217.202.174:8080',
                  '34.64.114.171:80',
                  '184.82.227.118:5649',
                  '207.148.119.162:8080',
                  '118.173.233.149:45160',
                  '195.85.218.66:8080',
                  '93.126.44.154:8080',
                  '143.198.222.22:8080',
                  '69.75.140.157:8080',
                  '183.89.115.107:8080',
                  '110.44.124.220:55443',
                  '103.216.48.85:8080',
                  '213.216.67.190:8080',
                  '136.244.92.97:8080',
                  '199.192.126.211:8080',
                  '102.176.160.70:61279',
                  '118.172.181.147:34388',
                  '49.0.65.4:8080',
                  '41.60.234.130:8080',
                  '212.46.255.78:8080',
                  '14.207.124.10:8080',
                  '159.65.134.33:8080',
                  '176.56.107.141:57628',
                  '77.45.201.219:8080',
                  '217.19.209.253:8080',
                  '191.242.182.132:8081',
                  '103.124.97.11:8080',
                  '143.198.3.76:3128',
                  '52.221.214.155:8080',
                  '35.220.171.251:3130',
                  '18.163.55.6:80',
                  '41.75.4.208:53281',
                  '157.230.40.79:8080',
                  '193.233.9.167:57625',
                  '161.82.175.172:8080',
                  '45.177.233.145:8080',
                  '159.192.149.80:8080',
                  '149.125.50.231:8080',
                  '157.230.85.89:8080',
                  '125.25.206.28:8080',
                  '143.55.57.18:8080',
                  '54.183.155.78:3128',
                  '14.207.14.222:8213',
                  '80.87.213.111:8080',
                  '62.152.75.110:50287',
                  '45.164.216.253:8080',
                  '154.73.53.186:8080',
                  '186.96.177.60:3128',
                  '95.165.4.178:8080',
                  '185.136.162.4:8080',
                  '18.139.161.101:80',
                  '35.220.171.251:3128',
                  '103.213.213.14:82',
                  '113.53.83.212:44664',
                  '61.19.40.50:31707',
                  '177.47.191.194:8080',
                  '46.209.106.66:8085',
                  '180.180.170.188:8080',
                  '43.231.63.115:8080',
                  '20.48.18.90:8080',
                  '82.200.215.136:3128',
                  '103.5.232.145:8080',
                  '82.99.232.18:58689',
                  '93.125.121.54:8080',
                  '136.232.209.70:47423',
                  '185.43.189.148:8080',
                  '83.242.251.37:8080',
                  '31.172.105.144:8080',
                  '23.140.80.226:999',
                  '179.53.194.172:999',
                  '142.93.53.237:3128',
                  '93.180.221.234:8080',
                  '121.211.254.46:8080',
                  '124.121.117.123:8213',
                  '85.163.230.171:8080',
                  '45.77.43.249:8080',
                  '80.28.102.26:8080',
                  '88.135.210.179:8080',
                  '174.138.116.12:80',
                  '41.220.114.154:8080',
                  '183.88.57.128:8080',
                  '192.248.145.25:8080',
                  '93.91.112.247:41258',
                  '18.218.138.95:3128',
                  '202.29.237.212:3128',
                  '195.53.49.11:3128',
                  '81.163.57.147:41258',
                  '195.239.217.102:8080',
                  '144.202.121.95:3128',
                  '67.219.125.54:8080',
                  '103.47.175.9:83',
                  '50.241.148.97:8080',
                  '176.113.73.97:3128',
                  '14.207.82.19:8080',
                  '187.2.32.121:8080',
                  '177.75.96.18:3128',
                  '207.174.202.218:8080',
                  '54.92.185.187:3128',
                  '104.154.55.201:80',
                  '196.22.221.97:58893',
                  '191.253.23.75:8080',
                  '192.241.172.93:8080',
                  '95.179.249.63:3128',
                  '167.179.78.102:8080',
                  '182.53.197.156:43060',
                  '216.128.129.168:3128',
                  '45.233.169.28:999',
                  '190.95.214.185:8080',
                  '186.225.63.134:38459',
                  '118.174.232.128:45019',
                  '102.141.210.93:53281',
                  '194.228.129.189:55472',
                  '176.236.98.37:8080',
                  '185.35.101.17:8081',
                  '177.71.77.202:20183',
                  '78.90.203.56:8080',
                  '207.148.69.3:8080',
                  '110.171.20.177:8080',
                  '101.109.17.206:8080',
                  '95.139.141.199:53281',
                  '202.128.22.29:48678',
                  '186.157.242.229:8080',
                  '95.79.36.55:44861',
                  '71.172.1.53:8080',
                  '198.12.254.161:3128',
                  '182.52.131.8:8080',
                  '109.234.38.27:3128',
                  '191.7.193.13:8080',
                  '84.244.31.19:8080',
                  '178.128.109.226:8080',
                  '90.163.133.120:8080',
                  '103.52.220.106:83',
                  '35.225.65.205:3128',
                  '171.99.131.78:8080',
                  '186.0.176.147:8080',
                  '62.138.8.187:3128',
                  '199.58.97.17:8080',
                  '101.109.176.109:8080',
                  '27.72.56.139:8080',
                  '24.245.100.212:48678',
                  '223.206.211.139:8080',
                  '183.88.212.184:8080',
                  '45.32.104.123:8888',
                  '155.138.156.26:8888',
                  '89.20.102.147:2580',
                  '202.166.207.195:8080',
                  '143.198.206.183:8080',
                  '185.17.134.149:45984',
                  '197.155.83.17:8080',
                  '177.128.216.6:3128',
                  '41.217.219.53:31398',
                  '157.245.252.104:8080',
                  '64.225.60.115:3128',
                  '185.200.38.74:8080',
                  '49.231.159.165:8080',
                  '35.245.254.223:3128',
                  '159.89.28.169:3128',
                  '152.228.152.75:8080',
                  '204.199.85.179:3128',
                  '1.20.99.122:8080',
                  '187.53.4.222:8080',
                  '13.250.32.7:3128',
                  '190.210.8.91:8080',
                  '187.190.53.182:8080',
                  '142.93.108.171:3128',
                  '118.174.234.21:43195',
                  '176.28.23.150:3128',
                  '176.62.188.158:56351',
                  '18.141.191.162:80',
                  '27.72.59.160:8080',
                  '111.92.240.134:30598',
                  '198.24.169.234:8001',
                  '1.20.235.100:8080',
                  '5.58.58.209:8080',
                  '88.220.104.178:8080',
                  '18.224.199.84:49205',
                  '183.88.71.105:8213',
                  '189.201.134.13:8080',
                  '131.161.237.86:8090',
                  '14.102.44.1:44047',
                  '180.180.156.15:43100',
                  '14.207.22.204:8080',
                  '94.25.104.250:8080',
                  '63.151.67.7:8080',
                  '202.61.51.204:3128',
                  '134.122.40.11:3128',
                  '186.167.20.211:3128']
                })
              console.log(data)
              const openData = data.graphql.shortcode_media
              let place = await openData.location ? `, ${await openData.location.name}` : ''
              let verify = await openData.owner.is_verified ? '✅' : ''
        
                // 1 pic, no vid
              if (typeof openData.edge_sidecar_to_children === 'undefined' && openData.is_video == false) {
              try {
                  const embed = new Discord.MessageEmbed()
                  .setTitle(`${markdownEscape(await openData.owner.full_name)}`)
                  .setDescription(trim(markdownEscape(await openData.edge_media_to_caption.edges[0].node.text), 2048))
                  .setFooter(`${moment.unix(await openData.taken_at_timestamp).format("h:mm A dddd MMMM Do YYYY")}${place}`)
                  .setColor(process.env.COLOR)
                  .setAuthor(`${await openData.owner.username} ${verify}`, await openData.owner.profile_pic_url, `https://www.instagram.com/${await openData.owner.username}/`)
                  .setImage(await openData.display_url)
                  await message.channel.send(embed)
                } catch {
                  return
                }
              }
              // 1 vid, nothing else
              if (openData.is_video == true && typeof openData.edge_sidecar_to_children === 'undefined') {
                const response = await fetch(openData.video_url, {
                  method: 'GET'
                })
                const buffer = await response.buffer()
                const embed = new Discord.MessageEmbed()
                  .setTitle(`${markdownEscape(await openData.owner.full_name)}`)
                  .setDescription(trim(markdownEscape(await openData.edge_media_to_caption.edges[0].node.text), 2048))
                  .setFooter(`${moment.unix(await openData.taken_at_timestamp).format("h:mm A dddd MMMM Do YYYY")}${place}`)
                  .setColor(process.env.COLOR)
                  .setAuthor(`${await openData.owner.username} ${verify}`, await openData.owner.profile_pic_url, `https://www.instagram.com/${await openData.owner.username}/`)
                  await message.channel.send(embed)
                  await message.channel.send(new Discord.MessageAttachment(buffer, 'video.mp4'))
              }
              // more pics than 1, videos featured as well
              if (openData.edge_sidecar_to_children) {
                function media (post) {
                  if (post.is_video == false) {
                      return post.display_url
                  }
                  if (post.is_video == false) {
                    return ''
                  }
                }
                
                // borrowed function from the leaderboard command
                function generateLBembed(lb) {
                  const embeds = [];
                  let k = 10;
                  // loops through the children-posts for a post till there isn't any posts left
                  for(let i =0; i < lb.edge_sidecar_to_children.edges.length; i += 1) {
                      // loops through every children-post, one children-post = current: object Object
                      const current = lb.edge_sidecar_to_children.edges[i]
                      k += 1;
                      // if children-post is not a video, it pushes a normal embed page with an image
                      if (current.node.is_video == false) {
                      const embed = new Discord.MessageEmbed()
                      .setDescription(trim(markdownEscape(lb.edge_media_to_caption.edges[0].node.text), 2048))
                      .setColor(process.env.COLOR)
                      .setImage(media(current.node))
                      .setTitle(`${markdownEscape(lb.owner.full_name)}`)
                      .setFooter(`${moment.unix(lb.taken_at_timestamp).format("h:mm A dddd MMMM Do YYYY")}${place}`)
                      .setAuthor(`${lb.owner.username} ${verify}`, lb.owner.profile_pic_url, `https://www.instagram.com/${lb.owner.username}/`)
                      embeds.push(embed)
                    }
                      // if children-post has a video, it doesn't send an .setImage
                      // it only sends the embed, and the video url
                      // perhaps it's possible to check out of the function scope below, if an object has two objects (embed, current.node.video_url), and if so, then it uses that url
                      if (current.node.is_video == true) {
                        const embed = new Discord.MessageEmbed()
                        .setDescription(trim(markdownEscape(lb.edge_media_to_caption.edges[0].node.text), 2048))
                        .setColor(process.env.COLOR)
                        .setTitle(`${markdownEscape(lb.owner.full_name)}`)
                        .setFooter(`${moment.unix(lb.taken_at_timestamp).format("h:mm A dddd MMMM Do YYYY")}${place}`)
                        .setAuthor(`${lb.owner.username} ${verify}`, lb.owner.profile_pic_url, `https://www.instagram.com/${lb.owner.username}/`)
                        embeds.push([embed, current.node.video_url])
                      }
                  }
                  return embeds;
              }
                  let currentPage = 0;
                  const embeds = generateLBembed(openData)
                  let queueEmbed;
                  // if the first object in the array is a photo
                  if (typeof embeds[currentPage][1] == 'undefined') {
                    queueEmbed = await message.channel.send(`Current Picture: ${currentPage+1}/${embeds.length}`, embeds[currentPage]);
                  }
                  // if the first object in the array is a video
                  if (typeof embeds[currentPage][1] != 'undefined') {
                    queueEmbed = await message.channel.send(`Current Video: ${currentPage+1}/${embeds.length}`, embeds[currentPage]);
                    const response = await fetch(embeds[currentPage][1], {
                      method: 'GET'
                    })
                    const buffer = await response.buffer()
                    await message.channel.send(new Discord.MessageAttachment(buffer, 'video.mp4'))
                  }
                  await queueEmbed.react('⬅️');
                  await queueEmbed.react('➡️');
                  await queueEmbed.react('❌');
                  queueEmbed.edit();
                  const filter = (reaction, user) => ['⬅️', '➡️', '❌'].includes(reaction.emoji.name) && (message.author.id === user.id);
                  const collector = queueEmbed.createReactionCollector(filter);
        
                    collector.on('collect', async (reaction, user) => {
                        if (reaction.emoji.name === '➡️') {
                            if (currentPage < embeds.length-1) {
                              currentPage++; // change page
                              // if the current page doesn't have a video
                              if (typeof embeds[currentPage][1] == 'undefined') {
                                reaction.users.remove(user);
                                queueEmbed.edit(`Current Picture: ${currentPage+1}/${embeds.length}`, embeds[currentPage]);
                                // if the last page has a video
                                if (typeof embeds[currentPage-1][1] != 'undefined') {
                                  await message.channel.messages.fetch({ limit: 5 }).then(messages => { 
                                    const botMessages = [];
                                    messages.filter(m => m.author.id === '787041583580184609').forEach(msg => botMessages.push(msg))
                                    message.channel.bulkDelete(botMessages)});
                                }
                              }
                              // if the current page has a video
                              if (typeof embeds[currentPage][1] != 'undefined') {
                                // if the last page has a video
                                if (typeof embeds[currentPage-1][1] != 'undefined') {
                                  await message.channel.messages.fetch({ limit: 5 }).then(messages => {
                                    const botMessages = [];
                                    messages.filter(m => m.author.id === '787041583580184609').forEach(msg => botMessages.push(msg))
                                    message.channel.bulkDelete(botMessages)});
                                }
                                reaction.users.remove(user);
                                queueEmbed.edit(`Current Video: ${currentPage+1}/${embeds.length}`, embeds[currentPage]);
                                const response = await fetch(embeds[currentPage][1], {
                                  method: 'GET'
                                })
                                const buffer = await response.buffer()
                                await message.channel.send(new Discord.MessageAttachment(buffer, 'video.mp4'))
                              }
                            } 
                          } else if (reaction.emoji.name === '⬅️') {
                            if (currentPage !== 0) {
                              --currentPage; // change page
                              // if the current page doesn't have a video
                              if (typeof embeds[currentPage][1] == 'undefined') {
                                reaction.users.remove(user);
                                queueEmbed.edit(`Current Picture ${currentPage+1}/${embeds.length}`, embeds[currentPage])
                                // if the last page has a video
                                if (typeof embeds[currentPage+1][1] != 'undefined') {
                                  await message.channel.messages.fetch({ limit: 5 }).then(messages => { 
                                    const botMessages = [];
                                    messages.filter(m => m.author.id === '787041583580184609').forEach(msg => botMessages.push(msg))
                                    message.channel.bulkDelete(botMessages)});
                                }
                              }
                              // if the current page has a video
                              if (typeof embeds[currentPage][1] != 'undefined') {
                                // if the last page has a video
                                if (typeof embeds[currentPage+1][1] != 'undefined') {
                                  await message.channel.messages.fetch({ limit: 5 }).then(messages => { 
                                    const botMessages = [];
                                    messages.filter(m => m.author.id === '787041583580184609').forEach(msg => botMessages.push(msg))
                                    message.channel.bulkDelete(botMessages)});
                                }
                                reaction.users.remove(user);
                                queueEmbed.edit(`Current Video ${currentPage+1}/${embeds.length}`, embeds[currentPage])
                                const response = await fetch(embeds[currentPage][1], {
                                  method: 'GET'
                                })
                                const buffer = await response.buffer()
                                await message.channel.send(new Discord.MessageAttachment(buffer, 'video.mp4'))
                              }
                            }
                          } else {
                            collector.stop();
                            await queueEmbed.delete();
                            if (typeof embeds[currentPage][1] != 'undefined') {
                              await message.channel.messages.fetch({ limit: 5 }).then(messages => { 
                                const botMessages = [];
                                    messages.filter(m => m.author.id === '787041583580184609').forEach(msg => botMessages.push(msg))
                                    message.channel.bulkDelete(botMessages)});
                            }
                          }
                    })
              }
            }

    const prefix = settings.prefix;

    if (!message.guild) return;
    if (!message.content.startsWith(prefix)) return;
    if (message.content.includes(`${prefix}?`)) return;
    if (message.content.includes(`${prefix}!`)) return;
    if (message.content.includes(`${prefix}+`)) return;
    if (message.content.includes(`${prefix}%`)) return;
    if (message.content.includes(`${prefix}/`)) return;
    if (message.content.includes(`${prefix}? `)) return;
    if (message.content.includes(`${prefix}! `)) return;
    if (message.content.includes(`${prefix}+ `)) return;
    if (message.content.includes(`${prefix}% `)) return;
    if (message.content.includes(`${prefix}/ `)) return;
    
    if (!message.member) message.member = await message.guild.fetchMember (message);

    const args = message.content.slice(prefix.length).trim().split(/ +/g);
    const cmd = args.shift().toLowerCase();
    
    if (cmd.length === 0) return;
    
    let command = client.commands.get(cmd) || client.commands.find(command => command.aliases && command.aliases.includes(cmd));
    if (!command) command = client.commands.get(client.aliases.get(cmd));    
   
   if (command) {
    {
        command.run(client, message, args);
    }
  } else {
    Command.findOne(
        { guildID: message.guild.id, command: cmd },
        async (err, data) => {
          if (err) throw err;
          if (data) {
              return message.channel.send(data.content);
          } else {
              return message.channel.send(`This command does not exist.\nUse ${prefix}Commands for a list of all commands. \nIf it was supposed to be a custom tag, it does not exist on this server.`);
        }
      }
    );
  }
  
};